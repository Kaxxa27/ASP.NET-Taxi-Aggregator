@using System.Text.Json;
@*@using Microsoft.JSInterop;
@model TaxiApplication.Domain.Entity.TaxiOrder*@
@model TaxiApplication.BLL.ViewModels.TaxiOrderViewModel
@{
	ViewBag.Title = "Map";
}

<!DOCTYPE html>
<html>
<head>
	<title></title>
	<meta charset="utf-8" />

	<script type="text/javascript">

		var map;
		var directionsManager;
		var route;
		// Создание карты с bign key
		function CreateMap() {
			map = new Microsoft.Maps.Map('#myMap', {
				credentials: 'AovVDz7evAPwd8iLhM6pBwRHM3wJD5Z2OJHpYwFeRktRbw5wF5-wYkaf9JycZGHW'
			});

			return map;
		}
		
		// Построение маршрута по двум заданным точкам с помощью модуля Directions
		function GetRoute(start, end) { 

			ClearMap();
			if (directionsManager) {
				// Set Route Mode to driving

				directionsManager.setRequestOptions({ routeMode: Microsoft.Maps.Directions.RouteMode.driving });
		
				var startWaypoint = new Microsoft.Maps.Directions.Waypoint({ address: start });
				var endWaypoint = new Microsoft.Maps.Directions.Waypoint({ address: end });

				directionsManager.addWaypoint(startWaypoint);
				directionsManager.addWaypoint(endWaypoint);

				//Add event handlers to directions manager.
                Microsoft.Maps.Events.addHandler(directionsManager, 'directionsUpdated', directionsUpdated);

				directionsManager.calculateDirections();						
			} else {
				//Load the Directions module and create a directions manager
				Microsoft.Maps.loadModule('Microsoft.Maps.Directions', {
					callback: function () {
						//Create the directions manager
						directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);
						//Perfrom route logic
						GetRoute(start, end);
					}
				});
			}
		}

		//Функция подсчета времени и дистанции и вывода их на html-element
		function directionsUpdated(e) {
			//Get the current route index.
			var routeIdx = directionsManager.getRequestOptions().routeIndex;

			//Get the distance of the route, rounded to 2 decimal places.
			var distance = Math.round(e.routeSummary[routeIdx].distance * 100) / 100;

			//Get the distance units used to calculate the route.
			var units = directionsManager.getRequestOptions().distanceUnit;
			var distanceUnits = '';

			if (units == Microsoft.Maps.Directions.DistanceUnit.km) {
				distanceUnits = 'km'
			} else {
				//Must be in miles
				distanceUnits = 'miles'
			}

			//Time is in seconds, convert to minutes and round off.
			var time = Math.round(e.routeSummary[routeIdx].timeWithTraffic / 60);

			//document.getElementById('routeInfoPanel').innerHTML = 'Distance: ' + distance + ' ' + distanceUnits + '<br/>Time with Traffic: ' + time + ' minutes';
			//document.getElementById('distanceLabel').innerHTML = distance;
			//document.getElementById('timeLabel').innerHTML = time;
		}
		// Очистка всех точек на карте и маршрутов
		function ClearMap() {

			map.entities.clear();
			if (directionsManager) {
				directionsManager.clearAll();
			}
		}

		// Добавление точек на карту
		function AddMarkers(map, locations) {
			for (var i = 0; i < locations.length; i++) {

				//Create an infobox at the center of the map but don't show it.
				infobox = new Microsoft.Maps.Infobox(map.getCenter(), {
					showCloseButton: false,
					visible: false
				});

				//Assign the infobox to a map instance.
				infobox.setMap(map);

				var pushpin = new Microsoft.Maps.Pushpin(
					new Microsoft.Maps.Location(locations[i].latitude, locations[i].longitude),
					{
						icon: createRedArrow(45),
						anchor: new Microsoft.Maps.Point(12, 12),
						title: locations[i].title
					});

				//Store some metadata with the pushpin.
				pushpin.metadata = {
					pin: locations[i].pin,
					title: locations[i].title,
					description: locations[i].description
				};

				//Add a mouse events to the pushpin.
				//Microsoft.Maps.Events.addHandler(pushpin, 'click', pushpinClicked);
				Microsoft.Maps.Events.addHandler(pushpin, 'mouseover', pushpinMouseOver);
				Microsoft.Maps.Events.addHandler(pushpin, 'mouseout', pushpinMouseOut);

				map.entities.push(pushpin);
			}
		}

		//function pushpinClicked(e) {
		//	//Make sure the infobox has metadata to display.
		//	if (e.target.metadata) {
		//		//Set the infobox options with the metadata of the pushpin.
		//		infobox.setOptions({
		//			location: e.target.getLocation(),
		//			title: e.target.metadata.title,
		//			description: e.target.metadata.description,
		//			visible: true
		//		});
		//	}
		//}
		function pushpinMouseOver(e) {
			//Make sure the infobox has metadata to display.
			if (e.target.metadata) {
				//Set the infobox options with the metadata of the pushpin.
				infobox.setOptions({
					maxHeight: 100,
					maxWidth: 300,
					location: e.target.getLocation(),
					title: e.target.metadata.title,
					description: e.target.metadata.description,
					visible: true,

					actions: [
						{
							label: 'Handler1',
							eventHandler: function () {
								alert('{pin}');
							}
						},
						{
							label: 'Handler2',
							eventHandler: function () {
								alert('Handler2');
							}
						}]
				});
			}
		}
		function pushpinMouseOut(e) {
			if (e.target.metadata) {
				infobox.setOptions({
					visible: false
				});
			}
		}

		// Добавление картинки в виде человека с помощью canvas
		function createRedArrow(heading) {
			var c = document.createElement('canvas');
			c.width = 50;
			c.height = 50;

			var context = c.getContext('2d');

			context.beginPath();
			context.arc(25, 25, 5, 0, 2 * Math.PI);
			context.strokeStyle = "black";
			//ctx.closePath();
			context.fill();
			//ctx.stroke();
			context.stroke();

			context.beginPath();
			context.moveTo(25, 30);
			context.lineTo(25, 40);
			context.strokeStyle = "black";
			context.stroke();

			context.beginPath();
			context.moveTo(20, 35);
			context.lineTo(30, 35);
			context.strokeStyle = "black";
			context.stroke();

			context.beginPath();
			context.moveTo(25, 40);
			context.lineTo(20, 45);
			context.strokeStyle = "black";
			context.stroke();

			context.beginPath();
			context.moveTo(25, 40);
			context.lineTo(30, 45);
			context.strokeStyle = "black";
			context.stroke();
			//var ctx = c.getContext('2d');

			////Offset the canvas such that we will rotate around the center of our arrow
			//ctx.translate(c.width * 0.5, c.height * 0.5);

			////Rotate the canvas by the desired heading
			//ctx.rotate(heading * Math.PI / 180);

			////Return the canvas offset back to it's original position
			//ctx.translate(-c.width * 0.5, -c.height * 0.5);

			//ctx.fillStyle = '#f00';

			////Draw a path in the shape of an arrow.
			//ctx.beginPath();
			//ctx.moveTo(12, 0);
			//ctx.lineTo(5, 20);
			//ctx.lineTo(12, 15);
			//ctx.lineTo(19, 20);
			//ctx.lineTo(12, 0);
			//ctx.closePath();
			//ctx.fill();
			//ctx.stroke();

			//Generate the base64 image URL from the canvas.
			return c.toDataURL();
		}

		// Базовая функция вывода карты
		// Была сделана, потому что при обращении к bing api и передаче туда функции создания карты (CreateMap),
		// дальше работать с этой картой не представлялось возможности (чтобы добавить метку уже на существующую карту),
		// а создание новой карты лишь создавало второй объект.
		function GlobalStart() {
			//Карта создается всегда, чтобы она была видна пользователю
			if(map == null)
				var map = CreateMap();

			@if (Model != null && Model.Route != null && Model.Route.StartLocation != null && Model.Route.EndLocation != null)
			{
				<text>
					var startLocation = @Html.Raw(Json.Serialize(Model.Route.StartLocation));
					var endLocation = @Html.Raw(Json.Serialize(Model.Route.EndLocation));
					GetRoute(startLocation, endLocation);
				</text>
			}
			@*@if (Model != null && Model.CurrentRoute != null && Model.CurrentRoute.StartLocation != null && Model.CurrentRoute.EndLocation != null)
			//{
			//		<text>
			//			var startLocation = @Html.Raw(Json.Serialize(Model.CurrentRoute.StartLocation));
			//			var endLocation = @Html.Raw(Json.Serialize(Model.CurrentRoute.EndLocation));
			//			GetRoute(startLocation, endLocation);
			//		</text>
			//}
			*@
		}
	</script>	

	<!-- Reference to the Bing Maps SDK -->
	<script type='text/javascript'
			src='https://www.bing.com/api/maps/mapcontrol?callback=GlobalStart'
			async defer></script>


</head>
<body>
	@* Встраивание частичного представления, для ввода данных о маршруте*@
	@*@await Html.PartialAsync("CreateTaxiOrder")*@

	<h1>Подтверждение маршрута: </h1>

	@if(Model is not null)
	{	
		<div>
			<p><label>Начальная точка: @Model.Route!.StartLocation</label></p>
			<p><label>Конечная точка: @Model.Route.EndLocation</label></p>
			<p><label>Дистанция маршрута: @Model.Route.Distance km</label></p>
			<p><label>Время на поездку: @Model.Route.Time</label></p>
			<p>
			<form asp-controller="Map" asp-action="SaveTaxiOrder" asp-area="" method="post">
				<input hidden name="taxiOrderViewModel" value="@JsonSerializer.Serialize(Model)" />
				<input type="submit" value="Подтвердить" />
			</form>

			<form asp-controller="Map" asp-action="CreateTaxiOrder" asp-area="" method="get">
				<button type="submit">Отменить</button>
			</form>
			</p>
		</div>	
	}

	<fieldset>
		<legend>Ваши предпочтения:</legend>
		<table>
			<tr>
				<td>
					<div>
						<input type="checkbox" asp-for="Order.IsPetFriendly" value="Order.IsPetFriendly">
						<label asp-for="Order.IsPetFriendly"></label>
					</div>
				</td>
				<td>
					<div>
						<input type="checkbox" asp-for="Order.IsMusicPreferenceNeeded" value="Order.IsMusicPreferenceNeeded">
						<label asp-for="Order.IsMusicPreferenceNeeded"></label>
					</div>
				</td>
				<td>
					<div>
						<input type="checkbox" asp-for="Order.IsChildSeatNeeded" value="Order.IsChildSeatNeeded">
						<label asp-for="Order.IsChildSeatNeeded"></label>
					</div>
				</td>
			</tr>
			<tr>
				<td>
					<div>
						<input type="checkbox" asp-for="Order.IsAirConditioningNeeded" value="Order.IsAirConditioningNeeded">
						<label asp-for="Order.IsAirConditioningNeeded"></label>
					</div>
				</td>
				<td>
					<div>
						<input type="checkbox" asp-for="Order.IsBaggageAssistanceNeeded" value="Order.IsBaggageAssistanceNeeded">
						<label asp-for="Order.IsBaggageAssistanceNeeded"></label>
					</div>
				</td>
				<td>
					<div>
						<input type="checkbox" asp-for="Order.IsMeetAndGreetNeeded" value="Order.IsMeetAndGreetNeeded">
						<label asp-for="Order.IsMeetAndGreetNeeded"></label>
					</div>
				</td>
			</tr>
		</table>
	</fieldset>

	<div id="myMap" style="position:relative;width:1800px;height:600px;"></div>
</body>
</html>


